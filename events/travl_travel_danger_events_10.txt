namespace = travl_travel_danger

scripted_effect travl_travel_danger_0010_outcome_effect = {
	# Setup character effects
	travl_travel_danger_0010_$OUTCOME$_effect = yes

	# Send messages to potential recipients and apply character effects
	travl_event_apply_outcome_effect = {
		EVENT = travel_danger_0010
		OUTCOME = $OUTCOME$
		RECIPIENTS = recipients
		TRAVELERS = travelers
	}
}

scripted_effect travl_travel_danger_0010_a_success_effect = {
	scope:martial_character = {
		travl_event_add_stress_effect = { TRAIT = craven VALUE = major }
		travl_event_add_prestige_effect = { VALUE = miniscule_prestige_value }
	}
}

scripted_effect travl_travel_danger_0010_a_failure_effect = {
	scope:martial_character = {
		travl_event_add_stress_effect = { TRAIT = craven VALUE = major }
		travl_event_remove_prestige_effect = { VALUE = minor_prestige_value }
	}
	travl_travel_danger_0010_failure_effect = yes
}

scripted_effect travl_travel_danger_0010_b_effect = {
	root = {
		travl_event_add_stress_effect = { TRAIT = brave VALUE = major }
	}
	travl_travel_danger_0010_failure_effect = yes
}

scripted_effect travl_travel_danger_0010_failure_effect = {
	every_in_list = {
		list = travelers
		random_list = {
			5 = {
				travl_event_death_effect = { REASON = death_fire KILLER = this }
			}
			25 = {
				travl_event_wound_effect = { REASON = burned }
			}
			70 = {}
		}
		travl_event_delay_travel_effect = { VALUE = minor }
	}
}

# Danger: Brush Fire
travl_travel_danger.0010 = {
	type = character_event
	title = travl_travel_danger.0010.t
	desc = travl_travel_danger.0010.desc
	theme = travel_danger
	#hidden = yes

	override_background = { reference = bp1_bonfire }
	left_portrait = {
		character = root
		animation = shock
	}

	trigger = {
		has_game_rule = travl_travel_events_enabled

		# Travel leader
		has_variable = travl_travel_leader
		var:travl_travel_leader = root

		# Available, traveling, adult, and unplayable
		is_available_travelling_adult = yes
		is_location_valid_for_travel_event_on_land = yes
		is_playable_character = no

		# Danger types
		location = {
			travl_is_travel_danger_type_hilly_terrain_trigger = {
				TRAVEL_PLAN = root.current_travel_plan
			}
		}

		# Doesn't have winter
		NOT = { location_has_winter_trigger = yes }

		# Is not an expert in this type of terrain
		travl_event_is_location_terrain_expert_trigger = no
	}

	cooldown = { months = 6 }

	immediate = {
		travl_debug_log_travel_event_effect = { MSG = travl_debug_msg_travel_danger_0010_t }

		# Get travelers and message recipients
		travl_event_get_travelers_effect = { TRAVELERS = travelers }
		travl_event_get_message_recipients_effect = { RECIPIENTS = recipients }

		# Find relevant travelers
		ordered_in_list = {
			list = travelers
			limit = {
				is_available_travelling_adult = yes
				martial >= low_skill_rating
			}
			order_by = martial
			save_scope_as = martial_character
		}

		# Save location
		location = { save_scope_as = location }

		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
	}

	# Try to put it out (martial challenge)
	option = {
		name = travl_travel_danger.0010.a

		trigger = {
			exists = scope:martial_character
		}

		scope:martial_character = {
			duel = {
				skill = martial
				value = high_skill_rating
				50 = {
					desc = travl_travel_danger.0010.a.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 3.5
						min = -49
					}
					root = {
						travl_travel_danger_0010_outcome_effect = { OUTCOME = a_success }
					}
				}
				50 = {
					desc = travl_travel_danger.0010.a.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
						min = -49
					}
					root = {
						travl_travel_danger_0010_outcome_effect = { OUTCOME = a_failure }
					}
				}
			}
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				who = scope:martial_character
				ai_boldness = 0.5 # stress: craven
				ai_energy = 0.5
			}
		}
	}

	# Run
	option = {
		name = travl_travel_danger.0010.b

		travl_travel_danger_0010_outcome_effect = { OUTCOME = b }

		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = -0.25 # stress: brave
				ai_energy = -0.25
			}
		}
	}
}