namespace = travl_travel_danger

scripted_effect travl_travel_danger_0009_outcome_effect = {
	# Setup character effects
	travl_travel_danger_0009_$OUTCOME$_effect = yes

	# Send messages to potential recipients and apply character effects
	travl_event_apply_outcome_effect = {
		EVENT = travel_danger_0009
		OUTCOME = $OUTCOME$
		RECIPIENTS = recipients
		TRAVELERS = travelers
	}
}

scripted_effect travl_travel_danger_0009_a_success_effect = {
	scope:learning_character = {
		travl_event_add_prestige_effect = { VALUE = miniscule_prestige_value }
	}
}

scripted_effect travl_travel_danger_0009_a_failure_effect = {
	scope:learning_character = {
		travl_event_remove_prestige_effect = { VALUE = minor_prestige_value }
	}
	travl_travel_danger_0009_failure_effect = yes
}

scripted_effect travl_travel_danger_0009_b_effect = {
	travl_travel_danger_0009_failure_effect = yes
}

scripted_effect travl_travel_danger_0009_failure_effect = {
	random_list = {
		30 = {
			every_in_list = {
				list = travelers
				travl_event_delay_travel_effect = { VALUE = minor }
			}
		}
		70 = {
			every_in_list = {
				list = travelers
				travl_event_delay_travel_effect = { VALUE = medium }
			}
		}
	}
}

# Danger: Ripped Sails
travl_travel_danger.0009 = {
	type = character_event
	title = travl_travel_danger.0009.t
	desc = travl_travel_danger.0009.desc
	theme = travel_danger
	#hidden = yes

	override_background = { reference = ocean }
	left_portrait = {
		character = root
		animation = fear
	}

	trigger = {
		has_game_rule = travl_travel_events_enabled

		# Travel leader
		has_variable = travl_travel_leader
		var:travl_travel_leader = root

		# Available, traveling, adult, and unplayable
		is_available_travelling_adult = yes
		is_playable_character = no

		# Danger types
		location = {
			OR = {
				travel_danger_type = {
					travel_plan = root.current_travel_plan
					terrain = sea
				}
				travel_danger_type = {
					travel_plan = root.current_travel_plan
					terrain = coastal_sea
				}
			}
		}

		# Is not an expert in this type of terrain
		travl_event_is_location_terrain_expert_trigger = no
	}

	cooldown = { months = 6 }

	immediate = {
		travl_debug_log_travel_event_effect = { MSG = travl_debug_msg_travel_danger_0009_t }

		# Get travelers and message recipients
		travl_event_get_travelers_effect = { TRAVELERS = travelers }
		travl_event_get_message_recipients_effect = { RECIPIENTS = recipients }

		# Find relevant travelers
		ordered_in_list = {
			list = travelers
			limit = {
				is_available_travelling_adult = yes
				learning >= low_skill_rating
			}
			order_by = learning
			save_scope_as = learning_character
		}

		# Save location
		location = { save_scope_as = location }

		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
	}

	# Raise makeshift sails (learning challenge)
	option = {
		name = travl_travel_danger.0009.a

		trigger = {
			exists = scope:learning_character
		}

		scope:learning_character = {
			duel = {
				skill = learning
				value = high_skill_rating
				50 = {
					desc = travl_travel_danger.0009.a.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 3.5
						min = -49
					}
					root = {
						travl_travel_danger_0009_outcome_effect = { OUTCOME = a_success }
					}
				}
				50 = {
					desc = travl_travel_danger.0009.a.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
						min = -49
					}
					root = {
						travl_travel_danger_0009_outcome_effect = { OUTCOME = a_failure }
					}
				}
			}
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				who = scope:learning_character
				ai_rationality = 0.5
				ai_energy = 0.5
			}
		}
	}

	# Wait for somebody to find us
	option = {
		name = travl_travel_danger.0009.b

		travl_travel_danger_0009_outcome_effect = { OUTCOME = b }

		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_rationality = -0.25
				ai_energy = -0.25
			}
		}
	}
}