namespace = travl_travel_danger

scripted_effect travl_travel_danger_0011_outcome_effect = {
	# Setup character effects
	travl_travel_danger_0011_$OUTCOME$_effect = yes

	# Send messages to potential recipients and apply character effects
	travl_event_apply_outcome_effect = {
		EVENT = travel_danger_0011
		OUTCOME = $OUTCOME$
		RECIPIENTS = recipients
		TRAVELERS = travelers
	}
}

scripted_effect travl_travel_danger_0011_a_success_effect = {
	scope:learning_character = {
		travl_event_add_prestige_effect = { VALUE = miniscule_prestige_value }
	}
	travl_travel_danger_0011_success_effect = yes
}

scripted_effect travl_travel_danger_0011_a_failure_effect = {
	scope:learning_character = {
		travl_event_remove_prestige_effect = { VALUE = minor_prestige_value }
	}
	travl_travel_danger_0011_failure_effect = yes
}

scripted_effect travl_travel_danger_0011_b_effect = {
	travl_travel_danger_0011_failure_effect = yes
}

scripted_effect travl_travel_danger_0011_success_effect = {
	every_in_list = {
		list = travelers
		random_list = {
			30 = {
				travl_event_add_modifier_effect = { MODIFIER = drained_by_mosquitoes_modifier }
			}
			70 = {}
		}
	}
}

scripted_effect travl_travel_danger_0011_failure_effect = {
	every_in_list = {
		list = travelers
		random_list = {
			70 = {
				travl_event_add_modifier_effect = { MODIFIER = drained_by_mosquitoes_modifier }
			}
			30 = {}
		}
	}
}

# Danger: Mosquitoes
travl_travel_danger.0011 = {
	type = character_event
	title = travl_travel_danger.0011.t
	desc = travl_travel_danger.0011.desc
	theme = travel_danger
	#hidden = yes

	left_portrait = {
		character = root
		animation = stress
	}

	trigger = {
		has_game_rule = travl_travel_events_enabled

		# Travel leader
		has_variable = travl_travel_leader
		var:travl_travel_leader = root

		# Available, traveling, adult, and unplayable
		is_available_travelling_adult = yes
		is_location_valid_for_travel_event_on_land = yes
		is_playable_character = no

		# Danger types
		location = {
			OR = {
				travl_is_travel_danger_type_marshy_terrain_trigger = {
					TRAVEL_PLAN = root.current_travel_plan
				}
				travl_is_travel_danger_type_flooded_terrain_trigger = {
					TRAVEL_PLAN = root.current_travel_plan
				}
				travl_is_travel_danger_type_forested_terrain_trigger = {
					TRAVEL_PLAN = root.current_travel_plan
				}
			}
		}

		# Doesn't have winter
		NOT = { location_has_winter_trigger = yes }

		# Is not an expert in this type of terrain
		travl_event_is_location_terrain_expert_trigger = no
	}

	cooldown = { months = 6 }

	immediate = {
		travl_debug_log_travel_event_effect = { MSG = travl_debug_msg_travel_danger_0011_t }

		# Get travelers and message recipients
		travl_event_get_travelers_effect = { TRAVELERS = travelers }
		travl_event_get_message_recipients_effect = { RECIPIENTS = recipients }

		# Find relevant travelers
		ordered_in_list = {
			list = travelers
			limit = {
				is_available_travelling_adult = yes
				learning >= low_skill_rating
			}
			order_by = learning
			save_scope_as = learning_character
		}

		# Save location
		location = { save_scope_as = location }

		traveler_danger_xp_effect = {
			MIN = 3
			MAX = 6
		}
	}

	# Try to find a remedy (learning challenge)
	option = {
		name = travl_travel_danger.0011.a

		trigger = {
			exists = scope:learning_character
		}

		scope:learning_character = {
			duel = {
				skill = learning
				value = high_skill_rating
				50 = {
					desc = travl_travel_danger.0011.a.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 3.5
						min = -49
					}
					# Automatic succes if they are physician, herbalist, or witch
					modifier = {
						OR = {
							has_trait = lifestyle_physician
							has_trait = lifestyle_herbalist
							has_trait = witch
						}
						add = 100
					}
					root = {
						travl_travel_danger_0011_outcome_effect = { OUTCOME = a_success }
					}
				}
				50 = {
					desc = travl_travel_danger.0011.a.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
						min = -49
					}
					root = {
						travl_travel_danger_0011_outcome_effect = { OUTCOME = a_failure }
					}
				}
			}
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				who = scope:learning_character
				ai_rationality = 1
			}
		}
	}

	# Push through
	option = {
		name = travl_travel_danger.0011.b

		travl_travel_danger_0011_outcome_effect = { OUTCOME = b }

		ai_chance = {
			base = 1
		}
	}
}